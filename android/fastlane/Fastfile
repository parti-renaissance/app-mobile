skip_docs

before_all do
  ensure_git_status_clean
end

lane :ci_check do
  variant = 'StagingDebug'
  build_apk(variant: variant)
end

lane :deliver_app do |options|
  environement = options[:variant]
  channel = options[:channel]
  bump_build_number = options[:bump_build_number]
  tag_release = options[:tag_release]
  bump_version_code if bump_build_number


  case environement
  when 'production'
    variant = 'ProductionRelease'
    build_aab(variant: variant)
    deploy_aab_to_playstore(aab: lane_context[:GRADLE_AAB_OUTPUT_PATH], appendice: '' )
    post_slack_notification_playstore(variant: variant)
    commit_deploy(variant: variant) if tag_release
  when 'staging'
    variant = 'StagingRelease'
    build_aab(variant: variant)
    deploy_aab_to_playstore(aab: lane_context[:GRADLE_AAB_OUTPUT_PATH], appendice: '.staging'  )
    post_slack_notification_playstore(variant: variant)
    commit_deploy(variant: variant) if tag_release
  else
    UI.user_error! 'Unknown variant environemt'
  end
end

private_lane :build_apk do |options|
  gradle(task: "assemble#{options[:variant]}")
end

private_lane :build_aab do |options|
  gradle(task: "bundle#{options[:variant]}")
end



private_lane :deploy_aab_to_playstore do |options|
  upload_to_play_store(
    package_name: 'fr.en_marche.jecoute' + options[:appendice],
    version_name: get_version_name,
    version_code: get_version_code,
    aab: options[:aab],
    track: 'internal',
    release_status: 'draft',
    json_key_data: ENV['ANDROID_JSON_PLAYSTORE_KEY'],
    skip_upload_metadata: true,
    skip_upload_changelogs: true,
    skip_upload_images: true,
    skip_upload_screenshots: true
  )
end

private_lane :post_slack_notification_beta do |options|
  apk_url = options[:download_link]
  appcenter_url = "https://install.appcenter.ms/orgs/#{ENV['APP_CENTER_OWNER']}/apps/#{ENV['APP_CENTER_NAME']}/distribution_groups/public"
  variant = options[:variant]
  slack(
    message: 'New Android build available',
    success: true,
    default_payloads: [],
    payload: {
      "Configuration": variant,
      'Version Name' => get_version_name,
      'Version Code' => get_version_code,
      'AppCenter' => appcenter_url,
      'Download APK' => apk_url
    },
    slack_url: ENV['SLACK_INCOMING_WEBKOOK_URL']
  )
end

private_lane :post_slack_notification_playstore do |options|
  variant = options[:variant]
  slack(
    message: 'New Android build ready to deploy on playstore',
    success: true,
    default_payloads: [],
    payload: {
      "Configuration": variant,
      'Version Name' => get_version_name,
      'Version Code' => get_version_code,
      'Playstore console' => 'https://play.google.com/console'
    },
    slack_url: ENV['SLACK_INCOMING_WEBKOOK_URL']
  )
end

private_lane :bump_version_code do
  gradle(task: "bumpVersionCode")
  git_commit(path: "./config.gradle", message: "Bump version code")
  ensure_git_status_clean(
    show_diff: true,
    show_uncommitted_changes: true
  )
  push_to_git_remote(tags: false) if is_ci
end

private_lane :commit_deploy do |options|
  variant = options[:variant].downcase
  tag = "android/#{variant}/#{get_version_name}/#{get_version_code}"
  branch = git_branch()
  set_github_release(
    repository_name: "EnMarche/Je-Marche",
    api_token: ENV["GH_BOT_TOKEN"],
    name: tag,
    tag_name: tag,
    description: changelog,
    commitish: branch,
    upload_assets: []
  ) if is_ci
end

lane :get_version_code do
  v_code_output = gradle(task: "getVCode -Pvariant=#{lane_context[:BUILD_VARIANT]}")
  captures = v_code_output.match('version_code:\\s*(\\d+)').captures
  captures[0]
end

lane :get_version_name do
  v_code_output = gradle(task: "getVName -Pvariant=#{lane_context[:BUILD_VARIANT]}")
  captures = v_code_output.match('version_name:\\s*((\\w+.?)+)').captures
  UI.message captures[0]
  captures[0]
end

def changelog
  File.read("../CHANGELOG.md") rescue "No changelog provided"
end
