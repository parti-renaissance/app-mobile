WORKSPACE = "JeMarche.xcworkspace"
XCODEPROJ = "JeMarche.xcodeproj"
SCHEME = "JeMarche"
TEMP_KEYCHAIN_NAME = "fastlane_enterprise"
TEMP_KEYCHAIN_PASSWORD = "temppassword"

skip_docs

before_all do
  ensure_git_status_clean
end

lane :build do
  build_without_codesign
end

lane :deploy do |options|
  match_type = options[:match_type]
  download_codesigning(match_type: match_type)
  set_codesigning
  gym(
    clean: true,
    scheme: SCHEME,
    configuration: "Release",
    output_name: SCHEME,
    export_method: export_method_from_match_type(match_type)
  )
  if match_type == "appstore"
    upload_to_testflight(
      team_name: ENV["FASTLANE_TEAM_NAME"],
      api_key_path: "fastlane/app_store_connect_api_key.json",
      skip_waiting_for_build_processing: true
    )
    post_slack_notification_appstore
  else
    deploy_to_appcenter(ipa: lane_context[:IPA_OUTPUT_PATH])
    post_slack_notification_beta
  end
end

#####################################################
# Private
#####################################################

private_lane :build_without_codesign do
  xargs = []
  xargs << "clean build"
  xargs << "-configuration Debug"
  xargs << "CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_ENTITLEMENTS= CODE_SIGN_IDENTITY="
  xargs << "-quiet"
  xargs = xargs.join(" ")
  xcodebuild(
    workspace: WORKSPACE,
    scheme: SCHEME,
    xcargs: xargs,
    output_style: :standard
  )
end

private_lane :deploy_to_appcenter do |options|
	appcenter_upload(
	  api_token: ENV["APP_CENTER_API_KEY"],
	  owner_name: ENV["APP_CENTER_OWNER"],
	  app_name: ENV["APP_CENTER_NAME"],
	  ipa: options[:ipa],
    destinations: "Public,Collaborators",
    destination_type: "group"
	)
end

private_lane :download_codesigning do |options|
  match_type = options[:match_type]
  create_temporary_keychain
  match(
    type: match_type,
    readonly: true,
    keychain_name: TEMP_KEYCHAIN_NAME,
    keychain_password: TEMP_KEYCHAIN_PASSWORD
  )
end

private_lane :set_codesigning do
  mapping = lane_context[:MATCH_PROVISIONING_PROFILE_MAPPING]
  bundle_identifier = get_build_settings("PRODUCT_BUNDLE_IDENTIFIER")
  profile_name = mapping[bundle_identifier]
  update_code_signing_settings(
    use_automatic_signing: false,
    profile_name: profile_name,
    code_sign_identity: "iPhone Distribution",
    path: XCODEPROJ,
    targets: ["JeMarche"]
  )
end

# We need to create a temporary keychain on github actions
# https://stackoverflow.com/questions/58118395/github-action-macos-keychain-access
private_lane :create_temporary_keychain do
  if File.exist?(File.expand_path("~/Library/Keychains/#{TEMP_KEYCHAIN_NAME}-db"))
    delete_keychain(name: TEMP_KEYCHAIN_NAME)
  end
  create_keychain(
    name: TEMP_KEYCHAIN_NAME,
    password: TEMP_KEYCHAIN_PASSWORD,
    unlock: true,
    timeout: false
  )
end

private_lane :post_slack_notification_beta do
  appcenter_url = "https://install.appcenter.ms/orgs/#{ENV["APP_CENTER_OWNER"]}/apps/#{ENV["APP_CENTER_NAME"]}/distribution_groups/public"
  slack(
    message: "New iOS build available",
    success: true,
    default_payloads: [],
    payload: {
      "Configuration": "Release",
      "Environment": ENV["ENVIRONMENT"],
      "Version" => app_version_number,
      "Build number" => app_build_number,
      "AppCenter" => appcenter_url
    },
    slack_url: ENV["SLACK_INCOMING_WEBKOOK_URL"]
  )
end

private_lane :post_slack_notification_appstore do |options|
  variant = options[:variant]
  slack(
    message: 'New iOS build ready to deploy on appstore',
    success: true,
    default_payloads: [],
    payload: {
      "Configuration": "Release",
      "Environment": ENV["ENVIRONMENT"],
      "Version" => app_version_number,
      "Build number" => app_build_number,
      "App store" => 'https://appstoreconnect.apple.com/apps/1441973895/testflight/ios'
    },
    slack_url: ENV['SLACK_INCOMING_WEBKOOK_URL']
  )
end

def app_version_number
  get_version_number(
    xcodeproj: XCODEPROJ,
    target: SCHEME
  )
end

def app_build_number
  get_build_number(xcodeproj: XCODEPROJ)
end

def get_build_settings(build_setting)
  # xcodebuild -showBuildSettings will return something like `   PRODUCT_NAME = YourAppName`
  # So we search for the `    PRODUCT_NAME =` part and remove it from the line
  string_to_search_for = build_setting + ' ='

  command = []
  command << "xcodebuild -showBuildSettings"
  command << "-project #{XCODEPROJ}"
  command << "-configuration Release"
  command << "-scheme #{SCHEME}"
  command << "2>/dev/null" # removes warnigs
  command << "| grep \"\s#{string_to_search_for}\""

  begin
    Dir.chdir("..") do
      build_setting_value = Action.sh(command.join(' ')).gsub(string_to_search_for, '').strip
      return build_setting_value
    end
  rescue StandardError
    UI.user_error!("Could not find the requested build setting #{build_setting}")
  end
end

def export_method_from_match_type(match_type)
  case match_type
  when 'adhoc'
    'ad-hoc'
  when 'appstore'
    'app-store'
  else
    UI.user_error!("Invalid match type #{match_type}. Could not infer export method.")
  end
end
